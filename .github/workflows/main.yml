name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      major:
        description: "Major version number"
        required: true
        default: "0"
      minor:
        description: "Minor version number"
        required: true
        default: "0"
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      docker_repository: ${{ secrets.DOCKER_REPOSITORY }}
      application_image: ${{ secrets.APPLICATION_IMAGE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'   # Use 'temurin' or your preferred JDK
          java-version: '17'        # Use Java 17 or your project's Java version

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test  # Skips tests; remove `-x test` to include tests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Read and Increment Version
        id: version
        run: |
          unique_version=$(date +'%Y%m%d-%H%M%S')
          echo "Generated version: $unique_version"

          # Set the unique version as an environment variable for later steps
          echo "VERSION=$unique_version" >> $GITHUB_ENV

      - name: Build Docker image with two tags
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          # Build and tag with both version number and latest
          docker build -t ${docker_repository}/spring-crud:${{ env.VERSION }} -t ${docker_repository}/${application_image}:latest .

      - name: Push Docker images to Docker Hub
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          # Push both the versioned tag and latest
          docker push ${docker_repository}/${application_image}:${{ env.VERSION }}
          docker push ${docker_repository}/${application_image}:latest
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    env:
#      EC2_SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
#      EC2_URL: ${{ secrets.AWS_EC2_HOST }}
#      EC2_USERNAME: ${{ secrets.AWS_EC2_USER }}
#      docker_repository: ${{ secrets.DOCKER_REPOSITORY }}
#      application_image: ${{ secrets.APPLICATION_IMAGE }}
#    steps:
#      - name: Prepare SSH Key
#        run: |
#          mkdir -p /home/runner/.ssh  # Explicitly create the .ssh directory
#          echo "${{ secrets.SSH_KEY }}" > /home/runner/.ssh/id_rsa  # Write the SSH key to id_rsa
#          chmod 600 /home/runner/.ssh/id_rsa
#
#      - name: SSH and Deploy on EC2
#        uses: appleboy/ssh-action@v0.1.7
#        with:
#          host: ${{ secrets.AWS_EC2_HOST }}
#          username: ${{ secrets.AWS_EC2_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            echo "Deploying to EC2..."
#            echo "key" > key && chmod 600 key
#            ssh -i key ${USER_NAME}@${HOSTNAME}
#            echo pwd
#            cd /home/ec2-user/project/spring-crud
#            docker pull ${docker_repository}/${application_image}
#            docker stack deploy -c docker-compose.yaml spring-service

  tag:
    runs-on: ubuntu-latest

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: UNIQUE VERSION
        id: version
        run: |
          unique_version=$(date +'%Y%m%d-%H%M%S')
          echo "Generated version: $unique_version"

          # Set the unique version as an environment variable for later steps
          echo "VERSION=$unique_version" >> $GITHUB_ENV


#      - name: Setup SSH for EC2
#        uses: omarhosny206/setup-ssh-for-ec2@v1.0.0
#        with:
#            EC2_SSH_PRIVATE_KEY: $EC2_SSH_PRIVATE_KEY
#            EC2_URL: $EC2_URL
#          # then you can run commands/scripts directly on the EC2 instance e.g.:
#      - name: Create a new file on the EC2 instance with "hello-world"
#        run: ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_URL "echo "hello-world" >> new_file.txt"

#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#      - name: Redeploy Service on EC2
#        run: |
#          aws ssm send-command \
#            --document-name "AWS-RunShellScript" \
#            --targets '[{"Key":"InstanceIds","Values":["${{ secrets.EC2_INSTANCE_ID }}"]}]' \
#            --parameters 'commands=["cd /project/spring-curd/ && docker-compose pull spring-web-app && docker-compose up -d --no-deps spring-web-app"]' \
#            --comment "Redeploy application"