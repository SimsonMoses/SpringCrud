name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'   # Use 'temurin' or your preferred JDK
          java-version: '17'        # Use Java 17 or your project's Java version

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test  # Skips tests; remove `-x test` to include tests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Read and Increment Version
        id: version
        run: |
          
          if [ ! -f VERSION ]; then echo "v0.0.0" > VERSION; fi
          
          # Read the current version from the VERSION file
          version=$(cat VERSION)
          echo "Current version: $version"

          # Increment the patch version (v0.0.3 -> v0.0.4)
          new_version=$(echo "$version" | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "New version: $new_version"

          # Update VERSION file with the new version and output it as an environment variable
          echo "$new_version" > VERSION
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Build Docker image with two tags
        run: |
          # Build and tag with both version number and latest
          docker build -t simsonmoses/spring-crud:${{ env.VERSION }} -t simsonmoses/spring-crud:latest .

      - name: Push Docker images to Docker Hub
        run: |
          # Push both the versioned tag and latest
          docker push simsonmoses/spring-crud:${{ env.VERSION }}
          docker push simsonmoses/spring-crud:latest

      - name: Prepare SSH Key
        run: |
          mkdir -p /home/runner/.ssh  # Explicitly create the .ssh directory
          echo "${{ secrets.SSH_KEY }}" > /home/runner/.ssh/id_rsa  # Write the SSH key to id_rsa
          chmod 600 /home/runner/.ssh/id_rsa

#      - name: SSH and Deploy on EC2
#        uses: ssh-action/ssh-action@v2
#        with:
#          host: ${{ secrets.AWS_EC2_HOST }}
#          username: ${{ secrets.AWS_EC2_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            echo "Deploying to EC2..."
#            echo "host:"+${{ secrets.AWS_EC2_HOST }}+" username:"+${{ secrets.AWS_EC2_USER }}
#            echo "key" > key && chmod 600 key
#            ssh -o StrictHostKeyChecking=no -i key ${USER_NAME}@${HOSTNAME}
#
#            cd /path/to/your/docker-compose
#            docker-compose down
#            docker-compose pull content-ms
#            docker-compose up -d --no-deps content-ms
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Redeploy Service on EC2
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"InstanceIds","Values":["${{ secrets.EC2_INSTANCE_ID }}"]}]' \
            --parameters 'commands=["cd /project/spring-curd/ && docker-compose pull spring-web-app && docker-compose up -d --no-deps spring-web-app"]' \
            --comment "Redeploy application"